import { supabaseService } from '../services/supabaseService';
import { productsService } from '../services/productsService';
import { supabase } from '../config/supabase';

// Comprehensive test suite for Supabase integration
export const testSupabaseIntegration = {
  // Test database connection
  async testConnection(): Promise<boolean> {
    try {
      console.log('üîó Testing Supabase connection...');
      
      const { data, error } = await supabase
        .from('products')
        .select('count', { count: 'exact' })
        .limit(1);
      
      if (error) {
        console.error('‚ùå Connection failed:', error);
        return false;
      }
      
      console.log('‚úÖ Connection successful. Products count:', data);
      return true;
    } catch (error) {
      console.error('‚ùå Connection test failed:', error);
      return false;
    }
  },

  // Test authentication flows
  async testAuthentication(): Promise<boolean> {
    try {
      console.log('üîê Testing authentication...');
      
      // Test current auth status
      const isAuth = await supabaseService.isAuthenticated();
      console.log('Current auth status:', isAuth);
      
      // Test getting current user
      const currentUser = await supabaseService.getCurrentUser();
      console.log('Current user:', currentUser?.name || 'None');
      
      return true;
    } catch (error) {\n      console.error('‚ùå Authentication test failed:', error);\n      return false;\n    }\n  },\n\n  // Test product operations\n  async testProducts(): Promise<boolean> {\n    try {\n      console.log('üõçÔ∏è Testing product operations...');\n      \n      // Test get all products\n      const allProducts = await productsService.getProducts();\n      console.log(`‚úÖ Loaded ${allProducts.length} products`);\n      \n      // Test get featured products\n      const featuredProducts = await productsService.getFeaturedProducts(3);\n      console.log(`‚úÖ Loaded ${featuredProducts.length} featured products`);\n      \n      // Test get categories\n      const categories = await productsService.getProductCategories();\n      console.log(`‚úÖ Loaded ${categories.length} categories:`, categories);\n      \n      // Test search\n      const searchResults = await productsService.searchProducts('Macallan');\n      console.log(`‚úÖ Search returned ${searchResults.length} results`);\n      \n      // Test get by category\n      const scotchProducts = await productsService.getProductsByCategory('Scotch');\n      console.log(`‚úÖ Found ${scotchProducts.length} Scotch products`);\n      \n      // Test single product\n      if (allProducts.length > 0) {\n        const product = await productsService.getProductById(allProducts[0].id);\n        console.log(`‚úÖ Single product:`, product?.name);\n      }\n      \n      return true;\n    } catch (error) {\n      console.error('‚ùå Product test failed:', error);\n      return false;\n    }\n  },\n\n  // Test user operations\n  async testUserOperations(): Promise<boolean> {\n    try {\n      console.log('üë§ Testing user operations...');\n      \n      const currentUser = await supabaseService.getCurrentUser();\n      if (!currentUser) {\n        console.log('‚ÑπÔ∏è No user authenticated, skipping user tests');\n        return true;\n      }\n      \n      console.log('Current user:', currentUser.name, currentUser.accountType);\n      \n      // Test get user by ID\n      const userById = await supabaseService.getUserById(currentUser.id);\n      console.log('‚úÖ Get user by ID:', userById?.name);\n      \n      // Test company operations if user is company user\n      if (currentUser.accountType === 'company' && currentUser.companyId) {\n        const company = await supabaseService.getCompanyById(currentUser.companyId);\n        console.log('‚úÖ Company loaded:', company?.name);\n        \n        const teamMembers = await supabaseService.getTeamMembersByCompany(currentUser.companyId);\n        console.log(`‚úÖ Team members: ${teamMembers.length}`);\n      }\n      \n      return true;\n    } catch (error) {\n      console.error('‚ùå User operations test failed:', error);\n      return false;\n    }\n  },\n\n  // Test real-time subscriptions\n  async testRealTimeSubscriptions(): Promise<boolean> {\n    try {\n      console.log('‚ö° Testing real-time subscriptions...');\n      \n      // Test product subscription\n      let productUpdateReceived = false;\n      const productSub = productsService.subscribeToProductChanges((payload) => {\n        console.log('‚úÖ Product update received:', payload.eventType);\n        productUpdateReceived = true;\n      });\n      \n      // Test user subscription if authenticated\n      let userUpdateReceived = false;\n      let userSub: any = null;\n      const currentUser = await supabaseService.getCurrentUser();\n      if (currentUser) {\n        userSub = supabaseService.subscribeToUserChanges(currentUser.id, (user) => {\n          console.log('‚úÖ User update received:', user?.name);\n          userUpdateReceived = true;\n        });\n      }\n      \n      // Clean up after a short delay\n      setTimeout(() => {\n        if (productSub) {\n          productsService.unsubscribeFromProductChanges(productSub);\n        }\n        if (userSub) {\n          supabase.removeChannel(userSub);\n        }\n        console.log('‚úÖ Subscriptions cleaned up');\n      }, 5000);\n      \n      console.log('‚úÖ Real-time subscriptions set up successfully');\n      return true;\n    } catch (error) {\n      console.error('‚ùå Real-time subscription test failed:', error);\n      return false;\n    }\n  },\n\n  // Test data security (RLS)\n  async testDataSecurity(): Promise<boolean> {\n    try {\n      console.log('üîí Testing data security (RLS)...');\n      \n      const currentUser = await supabaseService.getCurrentUser();\n      if (!currentUser) {\n        console.log('‚ÑπÔ∏è No user authenticated, skipping security tests');\n        return true;\n      }\n      \n      // Test that user can only access their own data\n      const userProfile = await supabaseService.getUserById(currentUser.id);\n      console.log('‚úÖ Can access own profile:', userProfile?.name);\n      \n      // Test company data access if applicable\n      if (currentUser.accountType === 'company' && currentUser.companyId) {\n        const companyData = await supabaseService.getCompanyById(currentUser.companyId);\n        console.log('‚úÖ Can access own company data:', companyData?.name);\n      }\n      \n      console.log('‚úÖ Data security tests passed');\n      return true;\n    } catch (error) {\n      console.error('‚ùå Data security test failed:', error);\n      return false;\n    }\n  },\n\n  // Run all tests\n  async runAllTests(): Promise<{ passed: number; failed: number; results: any[] }> {\n    console.log('üß™ Running comprehensive Supabase integration tests...');\n    console.log('='.repeat(50));\n    \n    const tests = [\n      { name: 'Connection', test: this.testConnection },\n      { name: 'Authentication', test: this.testAuthentication },\n      { name: 'Products', test: this.testProducts },\n      { name: 'User Operations', test: this.testUserOperations },\n      { name: 'Real-time Subscriptions', test: this.testRealTimeSubscriptions },\n      { name: 'Data Security', test: this.testDataSecurity },\n    ];\n    \n    const results = [];\n    let passed = 0;\n    let failed = 0;\n    \n    for (const { name, test } of tests) {\n      try {\n        console.log(`\\nüìã Running ${name} test...`);\n        const result = await test();\n        \n        if (result) {\n          console.log(`‚úÖ ${name} test PASSED`);\n          passed++;\n          results.push({ name, status: 'PASSED', error: null });\n        } else {\n          console.log(`‚ùå ${name} test FAILED`);\n          failed++;\n          results.push({ name, status: 'FAILED', error: 'Test returned false' });\n        }\n      } catch (error) {\n        console.log(`‚ùå ${name} test FAILED with error:`, error);\n        failed++;\n        results.push({ name, status: 'FAILED', error: error.message });\n      }\n    }\n    \n    console.log('\\n' + '='.repeat(50));\n    console.log(`üß™ Test Results: ${passed} passed, ${failed} failed`);\n    console.log('='.repeat(50));\n    \n    return { passed, failed, results };\n  },\n\n  // Quick health check\n  async quickHealthCheck(): Promise<boolean> {\n    try {\n      console.log('‚ö° Running quick health check...');\n      \n      const connectionOk = await this.testConnection();\n      const authOk = await this.testAuthentication();\n      const productsOk = await this.testProducts();\n      \n      const allOk = connectionOk && authOk && productsOk;\n      \n      console.log(allOk ? '‚úÖ Health check PASSED' : '‚ùå Health check FAILED');\n      return allOk;\n    } catch (error) {\n      console.error('‚ùå Health check failed:', error);\n      return false;\n    }\n  },\n};\n\n// Export individual test functions for use in components\nexport const {\n  testConnection,\n  testAuthentication,\n  testProducts,\n  testUserOperations,\n  testRealTimeSubscriptions,\n  testDataSecurity,\n  runAllTests,\n  quickHealthCheck,\n} = testSupabaseIntegration;